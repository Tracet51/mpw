// <auto-generated />
using System;
using MPW.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MPW.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MPW.Data.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("StreetAddress2");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MPW.Data.Agenda", b =>
                {
                    b.Property<int>("AgendaID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DocumentID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SessionID");

                    b.HasKey("AgendaID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("SessionID")
                        .IsUnique();

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("MPW.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AlternatePhoneNumber");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Field");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MPW.Data.AreasOfImprovement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ProtegeID");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ProtegeID");

                    b.ToTable("AreasOfImprovement");
                });

            modelBuilder.Entity("MPW.Data.Assignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCompleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("SessionID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("AssignmentID");

                    b.HasIndex("SessionID");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("MPW.Data.Certificate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("MentorID");

                    b.Property<string>("Name");

                    b.Property<int?>("ProtegeID");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("MentorID");

                    b.HasIndex("ProtegeID");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("MPW.Data.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<int?>("AddressID");

                    b.Property<string>("AppUserId");

                    b.Property<string>("CompanySize");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("MPW.Data.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("ProtegeID");

                    b.HasKey("CommentID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("ProtegeID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MPW.Data.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("PairID");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("CourseID");

                    b.HasIndex("PairID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("MPW.Data.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentID");

                    b.Property<int?>("AssignmentID1");

                    b.Property<string>("Category");

                    b.Property<int>("EventID");

                    b.Property<int?>("EventID1");

                    b.Property<byte[]>("File");

                    b.Property<long>("FileSize");

                    b.Property<string>("FileType");

                    b.Property<string>("Name");

                    b.Property<int>("ResourceID");

                    b.Property<int?>("ResourceID1");

                    b.Property<int>("SessionID");

                    b.Property<int?>("SessionID1");

                    b.Property<DateTime>("UploadDate");

                    b.HasKey("DocumentID");

                    b.HasIndex("AssignmentID1");

                    b.HasIndex("EventID1");

                    b.HasIndex("ResourceID1");

                    b.HasIndex("SessionID1");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("MPW.Data.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Attended");

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("EventName");

                    b.Property<int?>("SessionID");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Type");

                    b.HasKey("EventID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SessionID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MPW.Data.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("MentorID");

                    b.HasKey("FeedbackID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("MentorID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("MPW.Data.Mentor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<int?>("AddressID");

                    b.Property<string>("AppUserId");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("MPW.Data.Pair", b =>
                {
                    b.Property<int>("PairID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientID");

                    b.Property<int?>("ClientID1");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("JoinCode");

                    b.Property<int>("MentorID");

                    b.Property<int?>("MentorID1");

                    b.Property<int>("ProtegeID");

                    b.Property<int?>("ProtegeID1");

                    b.HasKey("PairID");

                    b.HasIndex("ClientID1");

                    b.HasIndex("MentorID1");

                    b.HasIndex("ProtegeID1");

                    b.ToTable("Pair");
                });

            modelBuilder.Entity("MPW.Data.Protege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<int?>("AddressID");

                    b.Property<string>("AppUserId");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Protege");
                });

            modelBuilder.Entity("MPW.Data.Resource", b =>
                {
                    b.Property<int>("ResourceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ResourceID");

                    b.HasIndex("CourseID");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("MPW.Data.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgendaID");

                    b.Property<int>("CourseID");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("SessionID");

                    b.HasIndex("CourseID");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("MPW.Data.StrategicDomain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("MentorID");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("MentorID");

                    b.ToTable("StrategicDomains");
                });

            modelBuilder.Entity("MPW.Data.Trello", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateCompleted");

                    b.Property<DateTime>("EstimatedDateCompleted");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Objective");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MPW.Data.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MPW.Data.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MPW.Data.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Agenda", b =>
                {
                    b.HasOne("MPW.Data.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Session", "Session")
                        .WithOne("Agenda")
                        .HasForeignKey("MPW.Data.Agenda", "SessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.AreasOfImprovement", b =>
                {
                    b.HasOne("MPW.Data.Protege")
                        .WithMany("AreasOfImprovement")
                        .HasForeignKey("ProtegeID");
                });

            modelBuilder.Entity("MPW.Data.Assignment", b =>
                {
                    b.HasOne("MPW.Data.Session", "Session")
                        .WithMany("Assignments")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Certificate", b =>
                {
                    b.HasOne("MPW.Data.Mentor")
                        .WithMany("Certificates")
                        .HasForeignKey("MentorID");

                    b.HasOne("MPW.Data.Protege")
                        .WithMany("Certificates")
                        .HasForeignKey("ProtegeID");
                });

            modelBuilder.Entity("MPW.Data.Client", b =>
                {
                    b.HasOne("MPW.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("MPW.Data.AppUser", "AppUser")
                        .WithOne("Client")
                        .HasForeignKey("MPW.Data.Client", "AppUserId");
                });

            modelBuilder.Entity("MPW.Data.Comment", b =>
                {
                    b.HasOne("MPW.Data.Assignment", "Assignment")
                        .WithMany("Comments")
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Protege", "Protege")
                        .WithMany()
                        .HasForeignKey("ProtegeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Course", b =>
                {
                    b.HasOne("MPW.Data.Pair", "Pair")
                        .WithMany("Courses")
                        .HasForeignKey("PairID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Document", b =>
                {
                    b.HasOne("MPW.Data.Assignment", "Assignment")
                        .WithMany("Documents")
                        .HasForeignKey("AssignmentID1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Event", "Event")
                        .WithMany("Documents")
                        .HasForeignKey("EventID1");

                    b.HasOne("MPW.Data.Resource", "Resource")
                        .WithMany("Documents")
                        .HasForeignKey("ResourceID1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Session", "Session")
                        .WithMany("Documents")
                        .HasForeignKey("SessionID1");
                });

            modelBuilder.Entity("MPW.Data.Event", b =>
                {
                    b.HasOne("MPW.Data.Course", "Course")
                        .WithMany("Events")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Session")
                        .WithMany("Events")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("MPW.Data.Feedback", b =>
                {
                    b.HasOne("MPW.Data.Assignment", "Assignment")
                        .WithMany("Feedback")
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPW.Data.Mentor", "mentor")
                        .WithMany()
                        .HasForeignKey("MentorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Mentor", b =>
                {
                    b.HasOne("MPW.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("MPW.Data.AppUser", "AppUser")
                        .WithOne("Mentor")
                        .HasForeignKey("MPW.Data.Mentor", "AppUserId");
                });

            modelBuilder.Entity("MPW.Data.Pair", b =>
                {
                    b.HasOne("MPW.Data.Client", "Client")
                        .WithMany("Pairs")
                        .HasForeignKey("ClientID1");

                    b.HasOne("MPW.Data.Mentor", "Mentor")
                        .WithMany("Pairs")
                        .HasForeignKey("MentorID1");

                    b.HasOne("MPW.Data.Protege", "Protege")
                        .WithMany("Pairs")
                        .HasForeignKey("ProtegeID1");
                });

            modelBuilder.Entity("MPW.Data.Protege", b =>
                {
                    b.HasOne("MPW.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("MPW.Data.AppUser", "AppUser")
                        .WithOne("Protege")
                        .HasForeignKey("MPW.Data.Protege", "AppUserId");
                });

            modelBuilder.Entity("MPW.Data.Resource", b =>
                {
                    b.HasOne("MPW.Data.Course", "Course")
                        .WithMany("Resources")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.Session", b =>
                {
                    b.HasOne("MPW.Data.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MPW.Data.StrategicDomain", b =>
                {
                    b.HasOne("MPW.Data.Mentor")
                        .WithMany("StrategicDomains")
                        .HasForeignKey("MentorID");
                });

            modelBuilder.Entity("MPW.Data.Trello", b =>
                {
                    b.HasOne("MPW.Data.Course", "Course")
                        .WithMany("Objectives")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
